function [ population, fitness_mat, fitness_net ] = mutation( population, fitness_mat, fitness_net, givens )
%UNTITLED8 Summary of this function goes here
%   Detailed explanation goes here
prob_mat = cell(1,size(population,2));
mutation_mat = cell(1,size(population,2));

for i = 1:size(population,2)
prob_mat{i} = logsig(fitness_mat{i});
prob_mat{i}(prob_mat{i} == 0.5) = 0.2;
mutation_mat{i} = zeros(size(prob_mat{i}));

for i2 = 1 :size(mutation_mat{i},1)
    for j2 = 1 :size(mutation_mat{i},2)
        x=rand;
        if x<prob_mat{i}(i2,j2)
            mutation_mat{i}(i2,j2)=1;
        end
    end
end

mutation_mat{i} = wrapSudokuToGridArrays(mutation_mat{i}).*~givens;    

for k = 1 : 9 :81
    grid  = mutation_mat{i}(1,k:k+8);
    swapidx = find(grid);
    if(length(swapidx)>1)
    grid = cyclicSwap(grid,population{i},swapidx);
    end
    mutation_mat{i}(1,k:k+8) = grid;
end



end


end


function grid = cyclicSwap(grid,population,swapidx)
temp = grid(swapidx(1));
for i = 1:length(swapidx)-1
    grid(swapidx(i)) = grid(swapidx(i+1));
end
grid(swapidx(end)) = temp;
end

